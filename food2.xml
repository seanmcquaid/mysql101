
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table restaurants
# ------------------------------------------------------------

DROP TABLE IF EXISTS `restaurants`;

CREATE TABLE `restaurants` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `distance` varchar(50) DEFAULT NULL,
  `stars` int(5) DEFAULT NULL,
  `category` varchar(50) DEFAULT NULL,
  `favoriteDish` varchar(50) DEFAULT NULL,
  `doesTakeOut` tinyint(1) DEFAULT NULL,
  `lastTimeAte` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

LOCK TABLES `restaurants` WRITE;
/*!40000 ALTER TABLE `restaurants` DISABLE KEYS */;

INSERT INTO `restaurants` (`id`, `name`, `distance`, `stars`, `category`, `favoriteDish`, `doesTakeOut`, `lastTimeAte`)
VALUES
	(1,'Bocca Lupo','6 miles',5,'Italian','Exotic Mushrooms',0,'2018-12-10'),
	(2,'LottaFrutta','7 miles',5,'Mexican/Ecuadorian','Lovin Lulo Smoothie',1,'2018-11-10'),
	(3,'Dish Dive','8 miles',5,'Fusion','Brussels Sprouts',0,'2018-03-13'),
	(4,'The Porter','6 miles',4,'New American','Rotating Special',1,'2018-10-22'),
	(5,'246','8 miles',5,'Italian','Trout',1,'2018-10-06'),
	(6,'Mediterranea','9 miles',4,'Greek','Roasted Chicken',1,'2018-12-19'),
	(7,'The Colonnade','3 miles',4,'Southern','Fried Chicken',1,'2018-11-25'),
	(8,'Miller Union','5 miles',5,'Southern','Farm Egg',1,'2018-08-01'),
	(9,'Rising Son','8 miles',4,'Diner','Pancakes',1,'2017-12-01'),
	(10,'Petit Chou','7 miles',5,'French','Dejeuner American',0,'2018-08-25'),
	(11,'Gato','8 miles',4,'Diner','Biscuit with Egg',1,'2018-12-11'),
	(12,'Wrecking Bar Brewpub','6 miles',4,'New American','Citrus Salad',0,'2017-12-01');

/*!40000 ALTER TABLE `restaurants` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table reviews
# ------------------------------------------------------------

DROP TABLE IF EXISTS `reviews`;

CREATE TABLE `reviews` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author_id` int(3) DEFAULT NULL,
  `stars` int(1) DEFAULT NULL,
  `title` varchar(50) DEFAULT NULL,
  `review` varchar(250) DEFAULT NULL,
  `restaurant_id` int(3) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

LOCK TABLES `reviews` WRITE;
/*!40000 ALTER TABLE `reviews` DISABLE KEYS */;

INSERT INTO `reviews` (`id`, `author_id`, `stars`, `title`, `review`, `restaurant_id`)
VALUES
	(1,1,5,'Surprise Surprise','This place knocked my socks off and now I cannot find them.',6),
	(2,3,2,'Trash','I\'ve cooked better food blindfolded!',4),
	(3,2,4,'Yep','It was yummy, I\'ll be back.',9),
	(4,1,4,'Deliciosoooo','Super romantic spot for me and my booooo!',16);

/*!40000 ALTER TABLE `reviews` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table users
# ------------------------------------------------------------

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `email` varchar(50) DEFAULT NULL,
  `total_posts` int(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;

INSERT INTO `users` (`id`, `name`, `email`, `total_posts`)
VALUES
	(1,'Tabitha Winkler','tabbykat333@aol.com',4),
	(2,'Jonah Weisse','jonah@hotmail.com',1),
	(3,'Roland Parvod','rollinp@gmail.com',2);

/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
When you have an aggreage function (sum, average)
and you want to group things togetehr, we use
GROUP BY, provide the field that should make the gorup */
-- 1. get the average stars by restaurant (restaurant name, average star rating)
SELECT r.name, AVG(reviews.stars) FROM restaurants as r
   INNER JOIN reviews ON r.id = reviews.restaurant_id
   GROUP BY r.id;

-- To discrimiate by group, use HAVING, not WHERE
SELECT r.name, AVG(reviews.stars) AS avgReview FROM restaurants as r
   INNER JOIN reviews ON r.id = reviews.restaurant_id
   GROUP BY r.id HAVING avgReview > 3;

SELECT r.name, AVG(reviews.stars) AS avgReview FROM restaurants as r
   INNER JOIN reviews ON r.id = reviews.restaurant_id
   WHERE reviews.stars > 4
   GROUP BY r.id;


-- 2. get the average stars by user (user name, average star rating)


-- 3. get the lowest star rating for each user (user name, lowest star rating)

SELECT users.name, MIN(reviews.stars) as lowestStar, MIN(r.name) as restaurantName from reviews
INNER JOIN users ON reviews.author_id = users.id
INNER JOIN restaurants AS r ON r.id = reviews.restaurant_id
GROUP BY users.id;

-- 4. get the number of reviews by restaurant (restaurant name, review count)
/* TO GET THE NUMBER OF SOMETHING, USE COUNT */

SELECT COUNT(r.id) FROM reviews
INNER JOIN restaurants as r on reviews.restaurant_id = r.id
GROUP BY r.id;

-- 5. get the number of restaurants in each category (category name, restaurant count)

-- 6. get number of 5 star reviews by restaurant (restaurant name, 5-star count)

-- 7. average star rating for a food category (category name, average star rating)